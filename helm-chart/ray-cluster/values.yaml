# Default values for ray-cluster.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: rayproject/ray
  tag: latest
  pullPolicy: IfNotPresent

nameOverride: "ray"
fullnameOverride: ""

imagePullSecrets: []
  # - name: an-existing-secret

head:
  groupName: headgroup
  replicas: 1
  type: head
  labels:
    key: value
  initArgs:
    port: '6379'
    redis-password: 'LetMeInRay' # Deprecated since Ray 1.11 due to GCS bootstrapping enabled
    dashboard-host: '0.0.0.0'
    num-cpus: '1' # can be auto-completed from the limits
    node-ip-address: $MY_POD_IP # auto-completed as the head pod IP
    block: 'true'
  containerEnv:
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
  envFrom: []
    # - secretRef:
    #     name: my-env-secret
  resources:
    limits:
      cpu: 1
    requests:
       cpu: 200m
  annotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  volumes:
    - name: log-volume
      emptyDir: { }
  volumeMounts:
    - mountPath: /tmp/ray
      name: log-volume


worker:
  ## If you want to disable the default worker group
  # disabled: true
  groupName: workergroup
  replicas: 1
  type: worker
  labels:
    key: value
  initArgs:
    node-ip-address: $MY_POD_IP
    redis-password: LetMeInRay
    block: 'true'
  containerEnv:
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    - name: RAY_DISABLE_DOCKER_CPU_WARNING
      value: "1"
    - name: CPU_REQUEST
      valueFrom:
        resourceFieldRef:
          containerName: ray-worker
          resource: requests.cpu
    - name: MY_POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
  envFrom: []
    # - secretRef:
    #     name: my-env-secret
  ports:
    - containerPort: 80
      protocol: TCP
  resources: 
    limits:
      cpu: 1
    requests:
       cpu: 200m
  annotations:
    key: value
  nodeSelector: {}
  tolerations: []
  affinity: {}
  volumes:
    - name: log-volume
      emptyDir: {}
  volumeMounts:
    - mountPath: /tmp/ray
      name: log-volume

extraWorkers:
  generic:
    disabled: true
    type: worker
    annotations: {}
    labels: {}
    rayStartParams:
      redis-password: 'LetMeInRay'
      node-ip-address: $MY_POD_IP
      block: 'true'
    replicas: 1
    minReplicas: 1
    maxReplicas: 3 # sane default for testing ray cluster
    containerExtraEnv: {}
    containerDefaultEnv:
    - name: CPU_REQUEST
      valueFrom:
        resourceFieldRef:
          containerName: generic
          resource: requests.cpu
    - name: CPU_LIMITS
      valueFrom:
        resourceFieldRef:
          containerName: generic
          resource: limits.cpu
    - name: MEMORY_LIMITS
      valueFrom:
        resourceFieldRef:
          containerName: generic
          resource: limits.memory
    - name: MEMORY_REQUESTS
      valueFrom:
        resourceFieldRef:
          containerName: generic
          resource: requests.memory
    - name: MY_POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    - name:  RAY_DISABLE_DOCKER_CPU_WARNING
      value: "1"
    - name: TYPE
      value: "worker"
    ports:
      http: 80
    resources:
      limits:
        cpu: "1"
      requests:
        cpu: "200m"
    initContainers:
      init-generic:
        image: busybox:1.28
        command:
        - 'sh'
        - '-c'
        - "until nslookup $RAY_IP.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for generic; sleep 2; done"
    lifecycle:
      preStop:
        exec:
          command: ["/bin/sh","-c","ray stop"]
    nodeSelector: {}
    affinity: {}
    tolerations: []
    volumes:
    - name: log-volume
      emptyDir: {}
    volumeMounts:
    - mountPath: /tmp/ray
      name: log-volume


headServiceSuffix: "ray-operator.svc"

service:
  type: ClusterIP
  port: 8080
